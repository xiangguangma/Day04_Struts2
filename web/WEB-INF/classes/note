一. 文件上传
1. 表单的提交方式必须是 post , 且form表单中必须加一个属性 enctype="multipart/form-data"
2. 表单中的文件标签为 <input type="file" name="Xxx">
3. 动作类中定义 File 类型的成员变量 xxx, 变量名与表单提交的name属性名一致;
    同时还需要提供对应的getter/setter方法
4. 动作类中定义获得上传文件的文件名称的属性xxxFileName, 其中XXx指的是表单中 name属性,
    同时提供对应的getter/ setter方法
5. 动作类中定义获得上传文件的MIME类型属性XXXContentType, 其中XXX指的是表单中 name 属性,
    同时提供对应的getter/ setter方法
6. 在动作方法中将表单提交的 File 保存在本地目录:
    a. 通过 ServletActionContext.getServletContext().getRealPath("file") 获得项目的 file文件夹
        所对应的真正路径, 该路径对应的是一个目录, 在 out/artifacts/项目_war_exploded/files目录下;
    b. 利用目标路径 + XXXFileName 构建目标文件, 例如: File file = new File("目标路径", XXXFileName);

    c. 利用 FileUtils.copyFile(srcFile, destFile) 保存文件

7. 需要注意的几个配置:
    a. 上传文件的大小: maximumSize(重写 fileUpload 拦截器中的大小限制属性)
        或 struts.multipart.maxSize (struts标签中的 content 常量设置);

    b. 上传文件的扩展名: allowedExtensions (重写 fileUpload拦截器中的扩展名属性, 多个用逗号隔开)
    c. 上传文件的MIME类型; allowedType(重写 fileUpload拦截器中的MIME属性, 多个用逗号隔开)


二. 文件下载
1.  在动作类中定义要提供下载的InputStream流对象, 该属性需要提供getter和setter方法
2. 在动作方法中初始化 inputStream对象:
    a. 通过 ServletActionContext.getServletContext().getRealPath("file")获得
        要下载的问价所对应的文件目录字符串
    b. 创建 File 对象, 即要提供下载的文件对象, 例如:
        File file = new File("文件目录", "文件名称");
    c. 构建输入流对象, 例如: inputStream = new FileInputStream(file);
    d. 如果文件名中包含中文, 需要调用 filenameEncoding 方法对文件名做一下处理
3. 在struts.xml 中配置 action 对象:
    a. result 中的type 需要变成 stream 对象; 例如:
        <result name= "success" type="stream">;
    b. 在<result> 标签中定义<param>子标签, 用于重写下载的参数配置:
        inputName: 下载的动作类中的输入流的属性名;
            例如: <param name="inputName">xxx</param> , 其中xxx需要与动作类的属性名一致;
        contentDisposition: 配置浏览器以何种形式下载文件;
            例如: <param name="contentDisposition">attachment;filename=${fileName}</param>
            其中${FileName}可以写死, 也可以用EL表达式动态取传递过来的参数
        contentType: 配置MIME类型,
            例如: <param name="contentType">application/octet-stream</param>